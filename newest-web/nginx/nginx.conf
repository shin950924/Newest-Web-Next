events {
    worker_connections 1024;
    use epoll;                      # Linux에서 더 나은 성능을 위한 이벤트 처리 방식
    multi_accept on;                # 여러 연결을 한번에 수락
}

http {
    # 기본 MIME 타입 설정
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 클라이언트 및 전송 최적화 설정
    client_max_body_size 100M;
    client_body_buffer_size 128k;   # 요청 본문 버퍼 크기
    client_header_buffer_size 1k;   # 헤더 버퍼 크기
    large_client_header_buffers 4 16k; # 큰 헤더를 위한 버퍼 설정
    
    # 연결 최적화
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;           # 연결 유지 시간 최적화
    keepalive_requests 100;         # 연결당 요청 수 제한
    server_tokens off;              # 보안 강화
    
    # 파일 캐싱 설정
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # Gzip 압축 설정
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 로그 포맷 및 기본 로그 파일 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main buffer=16k;
    error_log /var/log/nginx/error.log warn;

    # WebSocket 업그레이드 설정 (Next.js에서 WebSocket 사용 시 필요)
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # 백엔드 Next.js 서버 업스트림 설정
    upstream nextjs_backend {
        server nextjs:3000;         # docker-compose에서 정의한 서비스명:포트
        keepalive 32;               # keepalive 연결 유지
    }

    # HTTP 서버 - HTTPS로 리다이렉트
    server {
        listen 80;
        server_name shin1995seoul.com www.shin1995seoul.com;
        
        # 서버별 로그 설정
        access_log /var/log/nginx/shin1995seoul_access.log main buffer=16k;
        error_log /var/log/nginx/shin1995seoul_error.log warn;
        
        # HTTPS로 리다이렉트
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS 서버
    server {
        listen 443 ssl http2;       # HTTP/2 지원 추가
        server_name shin1995seoul.com www.shin1995seoul.com;
        
        # 서버별 로그 설정
        access_log /var/log/nginx/shin1995seoul_ssl_access.log main buffer=16k;
        error_log /var/log/nginx/shin1995seoul_ssl_error.log warn;
        
        # SSL 설정 강화
        ssl_certificate /etc/nginx/ssl/final.crt;
        ssl_certificate_key /etc/nginx/ssl/ssl.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # HSTS 설정 (HTTPS 강제)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # 보안 헤더 추가
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";

        location = /.well-known/apple-app-site-association {
            default_type application/json;
            root /usr/share/nginx/html;  # 실제 경로에 맞게 수정
            try_files $uri =404;
        }
        
        # 프록시 설정 - Next.js API 라우트 및 SSR 처리
        location / {
            proxy_pass http://nextjs_backend;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 8k;
            proxy_busy_buffers_size 16k;
            proxy_max_temp_file_size 0;
            
            # 타임아웃 설정
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # 캐시 헤더 설정
            proxy_cache_bypass $http_upgrade;
        }
        
        # Next.js 정적 파일 처리 (_next/static)
        location /_next/static {
            proxy_pass http://nextjs_backend;
            proxy_cache_bypass $http_upgrade;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }
        
        # 추가 정적 파일 처리 (public 폴더)
        location ~* ^/static/|^/favicon.ico|^/robots.txt|^/manifest.json {
            proxy_pass http://nextjs_backend;
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }
    }
}